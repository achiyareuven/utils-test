version: "3.9"

services:
  api:
    build: ./app
    container_name: api
    ports:
      - "8000:8000"
    environment:
      MONGO_URL: "mongodb://mongo:27017/appdb"
      MONGO_DB: "appdb"
      KAFKA_BOOTSTRAP_SERVERS: "kafka:9092"
      ES_URL: "http://elasticsearch:9200"
    depends_on:
      mongo:
        condition: service_healthy
      kafka:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy

  mongo:
    image: mongo:6.0
    container_name: mongo
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    healthcheck:
      test: ["CMD", "mongosh", "--quiet", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 10

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.13.2
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false            # מפשט למבחן
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
    ports:
      - "9200:9200"
    volumes:
      - es_data:/usr/share/elasticsearch/data
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost:9200/_cluster/health | grep -q '\"status\"'"]
      interval: 10s
      timeout: 5s
      retries: 20

  kafka:
    image: bitnami/kafka:3.7
    container_name: kafka
    environment:
      - KAFKA_ENABLE_KRAFT=yes
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
      - KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR=1
    ports:
      - "9092:9092"
    volumes:
      - kafka_data:/bitnami/kafka
    healthcheck:
      test: ["CMD-SHELL", "/opt/bitnami/kafka/bin/kafka-topics.sh --bootstrap-server localhost:9092 --list >/dev/null 2>&1"]
      interval: 10s
      timeout: 5s
      retries: 20

volumes:
  mongo_data:
  es_data:
  kafka_data:



#version: "3.9"
#services:
#  api:
#    build: ./app
#    environment:
#      WHISPER_MODELS_DIR: "/models"   # היכן לשמור/לטעון את המודלים
#    volumes:
#      - whisper_models:/models        # Volume לשמירת המודלים בין ריסטארטים
#    command: ["python", "transcribe.py", "example.mp3"]  # לדוגמה בלבד
#
#volumes:
#  whisper_models:

#FROM python:3.12-slim
#WORKDIR /app
#ENV PYTHONDONTWRITEBYTECODE=1 PYTHONUNBUFFERED=1
#
## ffmpeg דרוש ל-faster_whisper כדי לקרוא קבצי שמע
#RUN apt-get update && apt-get install -y ffmpeg && rm -rf /var/lib/apt/lists/*
#
#COPY requirements.txt .
#RUN pip install --no-cache-dir -r requirements.txt
#
#COPY . .


#FROM python:3.12-slim
#
#WORKDIR /app
#ENV PYTHONDONTWRITEBYTECODE=1 PYTHONUNBUFFERED=1
#
## ffmpeg + curl (למקרה שתרצה healthchecks)
#RUN apt-get update && apt-get install -y ffmpeg curl && rm -rf /var/lib/apt/lists/*
#
#COPY requirements.txt .
#RUN pip install --no-cache-dir -r requirements.txt
#
## הורדת מודל מראש לתיקייה /models בזמן ה-build
#RUN python - <<'PY'
#from faster_whisper import WhisperModel
## זה יבצע הורדה פעם אחת במהלך ה-build
#_ = WhisperModel("small", device="cpu", compute_type="int8", download_root="/models")
#PY
#
#ENV WHISPER_MODELS_DIR=/models
#
#COPY . .
#EXPOSE 8000
#
#CMD ["uvicorn", "main:app", "--host","0.0.0.0","--port","8000"]
